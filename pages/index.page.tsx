import Head from "next/head";
import { useWebcam } from "@/hooks/useWebcam";
import { useMediaRecorder } from "@/hooks/useMediaRecorder";
import { useSpeechRecognition } from "@/hooks/useSpeechRecognition";
import { useCallback, useState } from "react";
import { CurrentSlide, SlideState } from "@/pages/task_slides/CurrentSlide";

export default function Home() {
  const mediaStream: MediaStream | undefined = useWebcam("#preview");
  const { startRecording, stopRecording, savedRecordingUrl, isRecording } =
    useMediaRecorder(mediaStream);
  const { startListening, stopListening, results, resetResults } =
    useSpeechRecognition();
  const [slideState, setSlideState] = useState<SlideState>("START_RECORDING");
  const [currentTaskDuration, setCurrentTaskDuration] = useState<number>(0);

  const finishTask = () => {
    setSlideState("START_RECORDING");
    setCurrentTaskDuration(0);
    resetResults();
  };

  const setTimerStartTime = (time: number) => {
    console.log("time", time);
    setSlideState("TIMER");
    setCurrentTaskDuration(time);
  };

  const startTaskRecording = useCallback(() => {
    setSlideState("WHILE_RECORDING");
    startRecording();
    startListening();
  }, [startListening, startRecording, setSlideState]);

  const stopTaskRecording = useCallback(() => {
    setSlideState("CHOOSE_TIME");
    stopRecording();
    stopListening();
  }, [startListening, startRecording, setSlideState]);

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="relative">
        <div className="absolute h-screen w-screen z-30">
          <CurrentSlide
            slideState={slideState}
            stopTaskRecording={stopTaskRecording}
            startTaskRecording={startTaskRecording}
            isRecording={isRecording}
            savedRecordingUrl={savedRecordingUrl}
            transcriptionResults={results}
            setTimerStartTime={setTimerStartTime}
            currentTaskDuration={currentTaskDuration}
            finishTask={finishTask}
          />
        </div>
        <video
          id={"preview"}
          className="h-screen w-screen object-cover"
          muted
        ></video>
      </main>
    </>
  );
}
