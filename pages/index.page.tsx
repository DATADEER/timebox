import Head from 'next/head'
import {useWebcam} from "@/hooks/useWebcam";
import {useMediaRecorder} from "@/hooks/useMediaRecorder";
import {useSpeechRecognition} from "@/hooks/useSpeechRecognition";
import {StartRecording} from "@/pages/task_slides/StartRecording";
import {useCallback, useState} from "react";
import {WhileRecording} from "@/pages/task_slides/WhileRecording";
import {CurrentSlide, SlideState} from "@/pages/task_slides/CurrentSlide";

export default function Home() {

    const mediaStream: MediaStream | undefined = useWebcam("#preview")
    const {startRecording, stopRecording, savedRecordingUrl, isRecording} = useMediaRecorder(mediaStream)
    const {startListening, stopListening, results} = useSpeechRecognition()
    const [slideState, setSlideState] = useState<SlideState>("START_RECORDING");

    const startTaskRecording = useCallback(() => {
        setSlideState("WHILE_RECORDING")
        startRecording()
        startListening()
    }, [startListening, startRecording, setSlideState])

    const stopTaskRecording = useCallback(() => {
        setSlideState("CHOOSE_TIME")
        stopRecording()
        stopListening()
    },[startListening, startRecording, setSlideState])

    return (
        <>
            <Head>
                <title>Create Next App</title>
                <meta name="description" content="Generated by create next app"/>
                <meta name="viewport" content="width=device-width, initial-scale=1"/>
                <link rel="icon" href="/favicon.ico"/>
            </Head>
            <main className="relative">
                <div className="absolute h-screen w-screen z-30">
                    <CurrentSlide slideState={slideState} stopTaskRecording={stopTaskRecording} startTaskRecording={startTaskRecording} isRecording={isRecording} savedRecordingUrl={savedRecordingUrl}/>
                </div>
                <video id={"preview"} className="h-screen w-screen object-cover" muted></video>
                {savedRecordingUrl ? (<div>
                    <h1>Playback</h1>
                    <h2>{results.length}</h2>
                    <div className={"relative"}>
                        <ul className={"absolute z-50 top-[30px] left-[30px]"}>
                            {results.map((result, index) => (
                                <li key={result}><h1 className={"text-2xl font-bold"}>{result}</h1></li>
                            ))}
                        </ul>
                    </div>
                </div>) : null}
            </main>
        </>
    )

}

